package org.probe.rls.test.algo.evaluator.roc;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.probe.rls.algo.evaluator.roc.ROCCurve;


public class TestAUROC {

	@Test
	public void testAUROC1() {
		List<String> actualLabels = new ArrayList<String>();
		List<Double> predictedProb = new ArrayList<Double>();
		
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("0");
		actualLabels.add("1");
		actualLabels.add("0");
		actualLabels.add("1");
		actualLabels.add("0");
		actualLabels.add("0");
		
		predictedProb.add(1.0);
		predictedProb.add(0.999);
		predictedProb.add(0.999);
		predictedProb.add(0.973);
		predictedProb.add(0.568);
		predictedProb.add(0.421);
		predictedProb.add(0.382);
		predictedProb.add(0.377);
		predictedProb.add(0.146);
		predictedProb.add(0.11);
		
		ROCCurve roc = new ROCCurve("1", actualLabels, predictedProb);
		assertEquals(roc.getAUROC(), 0.875, 0.001);
	}
	
	
	@Test
	public void testAUROC2() {
		List<String> actualLabels = new ArrayList<String>();
		List<Double> predictedProb = new ArrayList<Double>();
		
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("0");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		actualLabels.add("1");
		
		predictedProb.add(0.557);
		predictedProb.add(0.859);
		predictedProb.add(0.922);
		predictedProb.add(0.904);
		predictedProb.add(0.97);
		predictedProb.add(0.949);
		predictedProb.add(0.827);
		predictedProb.add(0.258);
		predictedProb.add(0.809);
		predictedProb.add(0.855);
		predictedProb.add(0.772);
		predictedProb.add(0.955);
		predictedProb.add(0.909);
		predictedProb.add(0.937);
		predictedProb.add(0.99);
		predictedProb.add(0.976);
		predictedProb.add(0.909);
		predictedProb.add(0.561);
		predictedProb.add(0.988);
		predictedProb.add(0.941);
		predictedProb.add(0.973);
		predictedProb.add(0.855);
		predictedProb.add(0.99);
		predictedProb.add(0.978);
		predictedProb.add(0.989);
		predictedProb.add(0.977);
		predictedProb.add(0.953);
		predictedProb.add(0.795);
		predictedProb.add(0.985);
		predictedProb.add(0.916);
		predictedProb.add(0.331);
		predictedProb.add(0.887);
		predictedProb.add(0.979);
		predictedProb.add(0.955);
		predictedProb.add(0.947);
		predictedProb.add(0.961);
		predictedProb.add(0.987);
		predictedProb.add(0.882);
		predictedProb.add(0.891);
		predictedProb.add(0.966);
		predictedProb.add(0.966);
		predictedProb.add(0.949);
		predictedProb.add(0.945);
		predictedProb.add(0.913);
		predictedProb.add(0.72);
		predictedProb.add(0.971);
		predictedProb.add(0.842);
		predictedProb.add(0.966);
		predictedProb.add(0.953);
		predictedProb.add(0.973);
		predictedProb.add(0.984);
		predictedProb.add(0.793);
		predictedProb.add(0.973);
		predictedProb.add(0.864);
		predictedProb.add(0.99);
		predictedProb.add(0.878);
		predictedProb.add(0.984);
		predictedProb.add(0.753);
		predictedProb.add(0.989);
		predictedProb.add(0.528);
		predictedProb.add(0.451);
		predictedProb.add(0.739);
		predictedProb.add(0.956);
		predictedProb.add(0.952);
		predictedProb.add(0.989);
		predictedProb.add(0.847);
		predictedProb.add(0.957);
		predictedProb.add(0.574);
		predictedProb.add(0.913);
		predictedProb.add(0.373);
		predictedProb.add(0.961);
		predictedProb.add(0.922);
		predictedProb.add(0.923);
		predictedProb.add(0.915);
		predictedProb.add(0.975);
		predictedProb.add(0.865);
		predictedProb.add(0.984);
		predictedProb.add(0.955);
		predictedProb.add(0.982);
		predictedProb.add(0.69);
		predictedProb.add(0.918);
		predictedProb.add(0.952);
		predictedProb.add(0.97);
		predictedProb.add(0.961);
		predictedProb.add(0.884);
		predictedProb.add(0.99);
		predictedProb.add(0.973);
		predictedProb.add(0.959);
		predictedProb.add(0.956);
		predictedProb.add(0.944);
		predictedProb.add(0.957);
		predictedProb.add(0.922);
		predictedProb.add(0.899);
		predictedProb.add(0.99);
		predictedProb.add(0.952);
		predictedProb.add(0.436);
		predictedProb.add(0.919);
		predictedProb.add(0.922);
		predictedProb.add(0.97);
		predictedProb.add(0.815);
		predictedProb.add(0.873);
		predictedProb.add(0.971);
		predictedProb.add(0.944);
		predictedProb.add(0.978);
		predictedProb.add(0.873);
		predictedProb.add(0.911);
		predictedProb.add(0.944);
		predictedProb.add(0.759);
		predictedProb.add(0.955);
		predictedProb.add(0.856);
		predictedProb.add(0.99);
		predictedProb.add(0.829);
		predictedProb.add(0.981);
		predictedProb.add(0.815);
		predictedProb.add(0.981);
		predictedProb.add(0.982);
		predictedProb.add(0.851);
		predictedProb.add(0.967);
		predictedProb.add(0.853);
		predictedProb.add(0.921);
		predictedProb.add(0.945);
		predictedProb.add(0.955);
		predictedProb.add(0.764);
		predictedProb.add(0.949);
		predictedProb.add(0.99);
		predictedProb.add(0.955);
		predictedProb.add(0.973);
		predictedProb.add(0.969);
		predictedProb.add(0.971);
		predictedProb.add(0.302);
		predictedProb.add(0.909);
		predictedProb.add(0.978);
		predictedProb.add(0.979);
		predictedProb.add(0.886);
		
		ROCCurve roc = new ROCCurve("1", actualLabels, predictedProb);
		System.out.println(roc.getAUROC());
		assertEquals(roc.getAUROC(), 0.715, 0.003);
	}
	
	
}
